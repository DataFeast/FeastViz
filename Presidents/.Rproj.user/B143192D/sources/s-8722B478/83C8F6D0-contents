---
title: |
  [1]: https://www.facebook.com/An%C3%A1lisis-y-visualizaci%C3%B3n-de-datos-100602148375744
  [2]: https://raw.githubusercontent.com/DataFeast71/COVID19_plots/main/img/Logo_W.jpeg {width=1in}
  [![Analisis Y visualizacion][2]][1]
  Head Government Salaries 
date: "`r Sys.Date()`"
output:
  html_document:
    code_folding: null
    df_print: paged
    highlight: zenburn
    theme: cerulean
    toc: true
    toc_float: true
    toc_deep: 3
---

<style>
.tocify-extend-page {
  height: 0 !important;
}
</style>

```{r, echo=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo =FALSE)
```

In this case we would try to improve our plot using the presindents and prime ministers data that have been used as [Data Explorations](https://github.com/DataFeast71/Data_explorations/tree/main/docs).

This data visualizations is based from [Cedric]() but in our case we would try to make the same design but with other data.

```{r set-up, message=FALSE, warning=FALSE}
library(tidyverse)
library(showtext)
library(ggsci)
library(patchwork)
```

To Customize our plot we load some Google fonts using `showtext` package.

```{r fonts}
font_add_google(name = "Poppins", family = "Poppins")
font_add_google("Roboto Mono", "Roboto Mono")
font_add("Norsebold", "../DataFeast_utilities/Norsebold.otf")
showtext_auto()

theme_set(theme_light(base_size = 22, base_family = "Poppins"))
```

## Data

In previous works we extract the Salaries from Presidents and Primer Ministers so we have already worked with this data and here we only need to load the "Clean" format. 

```{r data_presidents}
df_incomes <- read.csv("https://raw.githubusercontent.com/DataFeast71/Data_explorations/main/Salaries_HeadGovernment/data/Presidents_data_clean.csv", header = TRUE, stringsAsFactors = FALSE)
head(df_incomes)
```

**Data Preparation tiles**

In this visualization we want to add the **World** as a mini-map but in a grid or tile version. For these we follow the process that [Martenzam]() made.

```{r world-tile}
df_world_tile <- read_csv("https://gist.githubusercontent.com/maartenzam/787498bbc07ae06b637447dbd430ea0a/raw/9a9dafafb44d8990f85243a9c7ca349acd3a0d07/worldtilegrid.csv") %>% 
  mutate(
    ## Namibias two-digit country code is handled as `NA` 
    alpha = if_else(name == "Namibia", "NA", alpha.2),
    ## We are oing to split America into "North" and South"
    region = if_else(region == "Americas", sub.region, region),
    region = if_else(region %in% c("Northern America", "Central America", "Caribbean"), "North America", region),
    region = if_else(region == "Southern America", "South America", region),
    ## to join both data set, we need a Id column
    country_code = alpha.3
  )
head(df_world_tile)
```

Before to join the datasets we need to know if the column `name` has the same countries than our HeadGoverment's data.

Only this countries weren't persent in the data set.

```{r}
setdiff(df_incomes$Country, df_world_tile$name)
```

```{r data_complete}
df_all <- df_incomes %>% 
  full_join(df_world_tile, by = c("Country" = "name")) %>% 
  filter(!is.na(region), !is.na(HeadOfState)) %>% 
  group_by(region) %>% 
  mutate(president_income_median = median(HeadOfState, na.rm = TRUE)) %>% 
  ungroup()

df_president <- df_all %>% 
  select(Country, HeadOfState, Status, Continent, region, president_income_median)
head(df_president)
```

## Basic boxplot

<img src="" alt = "Boxplot or Jitterplot">

## Sort the data

Our first step is reorder the `region` factor by the Salaries' median from each continent.

```{r}
df_sorted <- df_president %>% 
  mutate(region = fct_reorder(region, -president_income_median))
```

## Visualization

We would start with the general layer which is the data, scales and theme. As in the [Data exploration]() we observe that some salaries are highest than the median so we need to change the scale to **Logarithmic**.

```{r}
g <- ggplot(df_sorted, aes(x = region, y = HeadOfState, color = region)) +
  coord_flip() +
  scale_y_continuous(trans = "log10", limits = c(1e3,1.5e10), labels = scales::dollar, expand = c(0.005, 0.005)) +
  scale_color_manual(values = c("#005eb4", "#d30080", "#ffcf00", "#ff6e00", "#ff0015", "#00a63d")) +
  labs(x = NULL, y = "Head of State incomes") +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 20, family = "Roboto Mono"),
    axis.title = element_text(size = 16),
    axis.text.x = element_text(family = "Roboto Mono", size = 12),
    panel.grid = element_blank()
  )
```

**geom!**

Once we have the global layer in `ggplot` we need to decide which `geom` is the best options to represent the data. Also we calculated the median salari from all the Presidents or Head of State. Then we add a segment with `geom_segment` to show how far the salary median of the Continent is to World Median.

```{r}
world_income <- df_president %>% 
  summarize(median_income = median(HeadOfState, na.rm = TRUE)) %>% 
  pull(median_income)

gplot_geoms <- g +
  geom_segment(aes(x = region, xend = region, y = world_income, yend=president_income_median), size = 0.8) +
  geom_hline(aes(yintercept = world_income), color = "grey60", size = 0.6) +
  geom_jitter(position = position_jitter(seed = 2021, width = 0.2), size = 2, alpha = 0.3) +
  stat_summary(fun = median, geom= "point", size = 5)
```

With ggplot we can add as many things that we want but sometime some of them it is not possible to added automatic. Also, even if it's possible, some details it's better to add them controling the values. For this we use `annotate()`.

```{r}
g_text <- gplot_geoms +
  annotate("text", label = glue::glue("Worldwide income:\n{ scales::dollar(round(world_income, 1))} dollars"),
           x = 6.2, y = 3e6, family= "Poppins", size = 5, color = "gray10", lineheight=0.5) +
  annotate("text", label = "Continental median",
           x = 4.5, y = 5e3, family= "Poppins", size = 5, color = "gray10") +
  annotate("text", label = "Countries per country",
           x = 1.7, y = 3e3, family= "Poppins", size = 5, color = "gray10") +
  annotate("text", label = glue::glue("Mexico\n{scales::dollar(67903)}"),
           x = 5.6, y = 1e4, family= "Poppins", size = 5, color = "gray10", lineheight = 0.5) +
  annotate("text", label = "Saudi Arabia is the country\nwith the most expensive Head of State",
           x = 2.2, y = 3e9, family= "Poppins", size = 5, color = "gray10", lineheight = 0.5) #9.6e9
```

Then we need to add some arrows using  `geom_curve()` but for this it is try and try until found the best values.

```{r}
arrows <- tibble(
  x1 = c(6.0, 4.7, 2.5, 1.8, 1.6, 5.8),
  x2 = c(5.6, 5.0, 2.95, 2.2, 0.9, 6),
  y1 = c(3e6, 1e4, 2e9, 6e3, 6e3, 1e4),
  y2 = c(world_income, 61392, 9.6e+09, 39924,33600, 67903)
)

g_arrows <- g_text +
   geom_curve(
     data = arrows, aes(x = x1, y = y1, xend=x2, yend= y2),
     arrow = arrow(length = unit(0.07, "inch")), size = 0.4,
     color = "gray20", curvature = -0.3
   )
```

```{r}
g_final <- g_arrows +
  labs(caption = "",
       title = "Head of State") +
  theme(plot.caption = element_text(size = 9, color = "gray50"))
```

## Map tile

With the grid world data we can represent this using `geom_tile()`

```{r}
map_regions <- df_all %>% 
  ggplot(aes(x = x, y = y, fill = region, color = region)) +
  geom_tile(color = "white", show.legend = FALSE) +
  scale_y_reverse() +
  scale_fill_manual(values = c("Europe"="#005eb4","South America"="#d30080","Asia"="#ffcf00","Africa"="#ff6e00","Oceania"="#ff0015","North America"="#00a63d")) +
  #scale_fill_uchicago(guide = "none") +
  coord_equal() +
  theme(line = element_blank(),
        panel.background = element_rect(fill = "transparent"),
        plot.background =  element_rect(fill = "transparent", color = "transparent"),
        panel.border = element_rect(color = "transparent"),
        strip.background = element_rect(color = "gray20"),
        axis.text = element_blank(),
        plot.margin = margin(0,0,0,0)) +
  labs(x = NULL, y = NULL)
map_regions
```

```{r}
g_presidents <- g_final +
  annotation_custom(ggplotGrob(map_regions), xmin = 3.2, xmax = 7.8, ymin = 7.3, ymax = 10.1)
```

## Ministers

In the previous plot we show the salaries from **Head of State** which is conformed by Presidents and Royalty (???). In some countries, they are only representatives but not **Head of Government**. For this we can work with data from **Prime Ministers**.

```{r data-ministers}
df_all_2 <- df_incomes %>% 
  full_join(df_world_tile, by = c("Country" = "name")) %>% 
  filter(!is.na(region), !is.na(HeadGoverment)) %>% 
  group_by(region) %>% 
  mutate(goverment_income_median = median(HeadGoverment, na.rm = TRUE)) %>% 
  ungroup()

df_ministers <- df_all_2 %>% 
  select(Country, HeadGoverment, StatusGoverment, Continent, region, goverment_income_median)
head(df_ministers)
```

Instead of sort the regions by some number, we want to keep the same order than the previous plot.

```{r}
df_sorted <- df_ministers %>% 
  mutate(region = factor(region, levels = c("Europe", "South America", "Asia", "Africa", "Oceania", "North America")))
```

```{r}
g <- ggplot(df_sorted, aes(x = region, y = HeadGoverment, color = region)) +
  coord_flip() +
  scale_y_continuous(trans = "log10", limits = c(1e3,2e6), labels = scales::dollar, expand = c(0.005, 0.005)) +
  scale_color_manual(values = c("#005eb4", "#d30080", "#ffcf00", "#ff6e00", "#ff0015", "#00a63d")) +
  labs(x = NULL, y = "Head of Goverment incomes") +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 20, family = "Roboto Mono"),
    axis.title = element_text(size = 16),
    axis.text.x = element_text(family = "Roboto Mono", size = 12),
    panel.grid = element_blank(),
    plot.caption = element_text(size = 20, hjust = 1, vjust = 1, colour = "black", 
                                family = "Norsebold"),
  )
```

From here we would use the same style than before.

```{r}
world_ministers <- df_ministers %>% 
  summarize(median_income = median(HeadGoverment, na.rm = TRUE)) %>% 
  pull(median_income)

gplot_geoms <- g +
  geom_segment(aes(x = region, xend = region, y = world_ministers, yend=goverment_income_median), size = 0.8) +
  geom_hline(aes(yintercept = world_ministers), color = "grey60", size = 0.6) +
  geom_jitter(position = position_jitter(seed = 2021, width = 0.2), size = 2, alpha = 0.3) +
  stat_summary(fun = median, geom= "point", size = 5)
```

Let add some text or less than the other plot.

```{r}
g_text <- gplot_geoms +
  annotate("text", label = glue::glue("Worldwide income:\n{ scales::dollar(round(world_ministers, 1))} dollars"),
           x = 1.5, y = 2.1e4, family= "Poppins", size = 5, color = "gray10", lineheight=0.5) +
  annotate("text", label = "Continental median",
           x = 4.65, y = 1e4, family= "Poppins", size = 5, color = "gray10") +
  annotate("text", label = "Singapore is the country\nwith the most expensive Primer Minister",
           x = 2.6, y = 8e5, family= "Poppins", size = 5, color = "gray10", lineheight = 0.5) 
```

Then we need to make some arrows and try and try until the best fit.

```{r}
arrows <- tibble(
  x1 = c(1.6, 4.55, 2.7),
  x2 = c(2.5, 4.0, 2.95),
  y1 = c(2e4, 1e4, 1e6), # stard
  y2 = c(world_ministers, 4.5e4,1.55e6) # end
)

g_arrows <- g_text +
   geom_curve(
     data = arrows, aes(x = x1, y = y1, xend=x2, yend= y2),
     arrow = arrow(length = unit(0.07, "inch")), size = 0.4,
     color = "gray20", curvature = -0.3
   )
```

```{r}
g_ministers <- g_arrows +
  labs(caption = "Visualization by DATA FEAST | Data: Wikipedia, President's incomes",
       title = "Head of Goverment") +
  theme(plot.caption = element_text(size = 9, color = "gray50"))
```

```{r fullpanel, fig.width=14, fig.height=10}
## fullpanel
g_presidents + g_ministers + plot_layout(nrow = 1)
ggsave("FeastViz_IncomesHeaders.png", dpi = 300, width = 20, height = 8)
```
